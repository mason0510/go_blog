-- MySQL dump 10.13  Distrib 5.7.17, for macos10.12 (x86_64)
--
-- Host: localhost    Database: my_blog
-- ------------------------------------------------------
-- Server version	5.7.17

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `articleId` varchar(32) NOT NULL,
  `title` varchar(100) NOT NULL,
  `date` varchar(50) NOT NULL,
  `content` mediumtext NOT NULL,
  `gist` varchar(520) NOT NULL,
  `labels` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (5,'185592329a53565b3dcc3a03f6524b94','区块链学习(1)——mac上以太坊私有链搭建','2018-03-10 11:36:18','## go-ethereum客户端安装\nGo-ethereum客户端通常被称为Geth，它是个命令行界面，执行在Go上实现的完整以太坊节点。Geth得益于Go语言的多平台特性，支持在多个平台上使用(比如Windows、Linux、Mac)。Geth是以太坊协议的具体落地实现，通过Geth，你可以实现以太坊的各种功能，如账户的新建编辑删除，开启挖矿，ether币的转移，智能合约的部署和执行等等。所以，我们选择geth工具来进行开发。由于本人是mac，所以优先使用mac进行开发啦。mac中geth安装如下：\n```\nbrew tap ethereum/ethereum\nbrew install ethereum\n```\n检查是否安装成功\n```\ngeth --help\n```\n如果输出一些帮助提示命令，则说明安装成功.\n## 搭建私有链\n以太坊支持自定义创世区块，要运行私有链，我们就需要定义自己的创世区块，创世区块信息写在一个json格式的配置文件中。首先将下面的内容保存到一个json文件中，例如genesis.json。\njson文件内容如下:\n```json\n{\n  \\\"config\\\": {\n        \\\"chainId\\\": 10, \n        \\\"homesteadBlock\\\": 0,\n        \\\"eip155Block\\\": 0,\n        \\\"eip158Block\\\": 0\n    },\n  \\\"alloc\\\"      : {},\n  \\\"coinbase\\\"   : \\\"0x0000000000000000000000000000000000000000\\\",\n  \\\"difficulty\\\" : \\\"0x20000\\\",\n  \\\"extraData\\\"  : \\\"\\\",\n  \\\"gasLimit\\\"   : \\\"0x2fefd8\\\",\n  \\\"nonce\\\"      : \\\"0x0000000000000042\\\",\n  \\\"mixhash\\\"    : \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\n  \\\"parentHash\\\" : \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\n  \\\"timestamp\\\"  : \\\"0x00\\\"\n}\n```\n## 初始化：写入创世区块\n准备好创世区块json配置文件后，需要初始化区块链，将上面的创世区块信息写入到区块链中。首先要新建一个目录data0用来存放区块链数据(其实，这个目录data0就相当于一个根节点。当我们基于genesis.json生成根节点后，其他人就可以来连接此根节点，从而能进行交易)。data0目录结构如图所示：\n![这里写图片描述](http://img.blog.csdn.net/20180307131653789?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM5NDI2ODA0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n接下来进入privatechain目录中，执行初始化命令：\n```\ncd privatechain\ngeth --datadir data0 init genesis.json\n```\n上面的命令的主体是 geth init，表示初始化区块链，命令可以带有选项和参数，其中--datadir选项后面跟一个目录名，这里为 data0，表示指定数据存放目录为 data0， genesis.json是init命令的参数。\n\n运行上面的命令，会读取genesis.json文件，根据其中的内容，将创世区块写入到区块链中。如果看到log信息中含有```Successfully wrote genesis state```字样，说明初始化成功。\n\n初始化成功后的目录如下：\n![这里写图片描述](http://img.blog.csdn.net/20180307132132559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM5NDI2ODA0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n其中geth/chaindata中存放的是区块数据，keystore中存放的是账户数据。\n\n## 启动私有链节点\n初始化完成后，就有了一条自己的私有链，之后就可以启动自己的私有链节点并做一些操作，在终端中输入以下命令即可启动节点：\n```\ngeth --datadir data0 --networkid 1108 console\n```\n上面命令的主体是geth console，表示启动节点并进入交互式控制台，--datadir选项指定使用data0作为数据目录，--networkid选项后面跟一个数字，这里是1108，表示指定这个私有链的网络id为1108。网络id在连接到其他节点的时候会用到，以太坊公网的网络id是1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络id(上面命令可能会运行失败，我直接重启mac，再进入到privateChain目录中，简单粗暴)。\n\n运行上面的命令后，就启动了区块链节点并进入了Javascript Console：\n![这里写图片描述](http://img.blog.csdn.net/20180307132731715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM5NDI2ODA0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n这是一个交互式的Javascript执行环境，在这里面可以执行Javascript代码，其中>是命令提示符。在这个环境里也内置了一些用来操作以太坊的Javascript对象，可以直接使用这些对象。这些对象主要包括：\n\n**eth：**包含一些跟操作区块链相关的方法\n**net：**包含以下查看p2p网络状态的方法\n**admin：**包含一些与管理节点相关的方法\n**miner：**包含启动&停止挖矿的一些方法\n**personal：**主要包含一些管理账户的方法\n**txpool：**包含一些查看交易内存池的方法\n**web3：**包含了以上对象，还包含一些单位换算的方法\n\n## 玩转Javascript Console\n进入以太坊Javascript Console后，就可以使用里面的内置对象做一些操作，这些内置对象提供的功能很丰富，比如查看区块和交易、创建账户、挖矿、发送交易、部署智能合约等。接下来介绍几个常用功能，下面的操作中，前面带>的表示在Javascript Console中执行的命令。\n\n### 创建账户\n前面只是搭建了私有链，并没有自己的账户，可以在js console中输入eth.accounts来验证：\n```\n> eth.accounts\n[]\n```\n此时没有账户，接下来使用personal对象来创建一个账户：\n```\n> personal.newAccount()\n> Passphrase:\n> Repeat passphrase:\n\\\"0x4a3b0216e1644c1bbabda527a6da7fc5d178b58f\\\"\n```\nPassphrase其实就是密码的意思，输入两次密码后，就创建了一个账户。再次执行命令:\n```\n> personal.newAccount()\n> Passphrase:\n> Repeat passphrase:\n\\\"0x46b24d04105551498587e3c6ce2c3341d5988938\\\"\n```\n这时候再去看账户，就有两个了。\n```\n> eth.accounts\n[\\\"0x4a3b0216e1644c1bbabda527a6da7fc5d178b58f\\\", \\\"0x46b24d04105551498587e3c6ce2c3341d5988938\\\"]\n```\n账户默认会保存在数据目录的keystore文件夹中。查看目录结构，发现data0/keystore中多了两个文件，这两个文件就对应刚才创建的两个账户，这是json格式的文本文件，可以打开查看，里面存的是私钥经过密码加密后的信息。\n![这里写图片描述](http://img.blog.csdn.net/20180307133726581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM5NDI2ODA0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\njson文件中信息格式如下：\n```\n{\n  \\\"address\\\": \\\"4a3b0216e1644c1bbabda527a6da7fc5d178b58f\\\",\n  \\\"crypto\\\": {\n    \\\"cipher\\\": \\\"aes-128-ctr\\\",\n    \\\"ciphertext\\\": \\\"238d6d48126b762c8f13e84622b1bbb7713f7244c2f24555c99b76396fae8355\\\",\n    \\\"cipherparams\\\": {\n      \\\"iv\\\": \\\"d0f5a3d3e6c1eeec77bf631bc938725d\\\"\n    },\n    \\\"kdf\\\": \\\"scrypt\\\",\n    \\\"kdfparams\\\": {\n      \\\"dklen\\\": 32,\n      \\\"n\\\": 262144,\n      \\\"p\\\": 1,\n      \\\"r\\\": 8,\n      \\\"salt\\\": \\\"70dc72c4eb63bea50f7637d9ff85bb53f6ca8ace17f4245feae9c0bc9abaad82\\\"\n    },\n    \\\"mac\\\": \\\"bd7fc0c937c39f1cbbf1ca654c33b53d7f9c644c6dacfeefe1641d2f3decea04\\\"\n  },\n  \\\"id\\\": \\\"57803d82-0cd4-4a78-9c29-9f9252fdcf60\\\",\n  \\\"version\\\": 3\n}\n```\n### 查看账户余额\neth对象提供了查看账户余额的方法：\n```\n> eth.getBalance(eth.accounts[0])\n0\n> eth.getBalance(eth.accounts[1])\n0\n```\n目前两个账户的以太币余额都是0，要使账户有余额，可以从其他账户转账过来，或者通过挖矿来获得以太币奖励。\n### 启动&停止挖矿\n通过miner.start()来启动挖矿：\n```\n> miner.start(10)\n```\n其中start的参数表示挖矿使用的线程数。第一次启动挖矿会先生成挖矿所需的DAG文件，这个过程有点慢，等进度达到100%后，就会开始挖矿，此时屏幕会被挖矿信息刷屏。\n\n如果想停止挖矿，并且进度已经达到100%之后，可以在js console中输入\n```\nminer.stop()：\n```\n注意：输入的字符会被挖矿刷屏信息冲掉，没有关系，只要输入完整的miner.stop()之后回车，即可停止挖矿。\n\n挖到一个区块会奖励5个以太币，挖矿所得的奖励会进入矿工的账户，这个账户叫做coinbase，默认情况下coinbase是本地账户中的第一个账户：\n```\n> eth.coinbase\n\\\"0x4a3b0216e1644c1bbabda527a6da7fc5d178b58f\\\"\n```\n现在的coinbase是账户0，要想使挖矿奖励进入其他账户，通过miner.setEtherbase()将其他账户设置成coinbase即可：\n```\n> miner.setEtherbase(eth.accounts[1])\ntrue\n> eth.coinbase\n\\\"0x46b24d04105551498587e3c6ce2c3341d5988938\\\"\n```\n挖到区块以后，账户0里面应该就有余额了：\n```\n> eth.getBalance(eth.accounts[0])\n2.31e+21\n```\ngetBalance()返回值的单位是wei，wei是以太币的最小单位，1个以太币=10的18次方个wei。要查看有多少个以太币，可以用web3.fromWei()将返回值换算成以太币：\n```\n> web3.fromWei(eth.getBalance(eth.accounts[0]),\\\'ether\\\')\n2310\n```\n\n### 发送交易\n截止目前，账户一的余额还是0：\n```\n> eth.getBalance(eth.accounts[1])\n0\n```\n可以通过发送一笔交易，从账户0转移10个以太币到账户1：\n```\n> amount = web3.toWei(10,\\\'ether\\\')\n\\\"10000000000000000000\\\"\n> eth.sendTransaction({from:eth.accounts[0],to:eth.accounts[1],value:amount})\nError: authentication needed: password or unlock\n    at web3.js:3143:20\n    at web3.js:6347:15\n    at web3.js:5081:36\n    at <anonymous>:1:1\n```\n这里报错了，原因是账户每隔一段时间就会被锁住，要发送交易，必须先解锁账户，由于我们要从账户0发送交易，所以要解锁账户0：\n```\n> personal.unlockAccount(eth.accounts[0])\nUnlock account 0x4a3b0216e1644c1bbabda527a6da7fc5d178b58f\nPassphrase: \ntrue\n```\n输入创建账户时设置的密码，就可以成功解锁账户。然后再发送交易：\n```\n> amount = web3.toWei(10,\\\'ether\\\')\n\\\"10000000000000000000\\\"\n> eth.sendTransaction({from:eth.accounts[0],to:eth.accounts[1],value:amount})\nINFO [03-07|11:13:11] Submitted transaction                    fullhash=0x1b21bba16dd79b659c83594b0c41de42debb2738b447f6b24e133d51149ae2a6 recipient=0x46B24d04105551498587e3C6CE2c3341d5988938\n\\\"0x1b21bba16dd79b659c83594b0c41de42debb2738b447f6b24e133d51149ae2a6\\\"\n```\n我们去查看账户1中的余额：\n```\n> eth.getBalance(eth.accounts[1])\n0\n```\n发现还没转过去，此时交易已经提交到区块链，但还未被处理，这可以通过查看txpool来验证：\n```\n> txpool.status\n{\n  pending: 1,\n  queued: 0\n}\n```\n其中有一条pending的交易，pending表示已提交但还未被处理的交易。\n\n要使交易被处理，必须要挖矿。这里我们启动挖矿，然后等待挖到一个区块之后就停止挖矿：\n```\n> miner.start(1);admin.sleepBlocks(1);miner.stop();\n```\n当miner.stop()返回true后，txpool中pending的交易数量应该为0了，说明交易已经被处理了，而账户1应该收到币了：\n```\n> web3.fromWei(eth.getBalance(eth.accounts[1]),\\\'ether\\\')\n10\n```\n\n### 查看交易和区块\neth对象封装了查看交易和区块信息的方法。\n\n查看当前区块总数：\n```\n> eth.blockNumber\n463\n```\n通过区块号查看区块：\n```\n> eth.getBlock(66)\n{\n  difficulty: 135266,\n  extraData: \\\"0xd783010802846765746886676f312e31308664617277696e\\\",\n  gasLimit: 3350537,\n  gasUsed: 0,\n  hash: \\\"0x265dfcc0649bf6240812256b2b9b4e3ae48d51fd8e43e25329ac111556eacdc8\\\",\n  logsBloom: \\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\n  miner: \\\"0x4a3b0216e1644c1bbabda527a6da7fc5d178b58f\\\",\n  mixHash: \\\"0xaf755722f62cac9b483d3437dbc795f2d3a02e28ec03d39d8ecbb6012906263c\\\",\n  nonce: \\\"0x3cd80f6ec5c2f3e9\\\",\n  number: 66,\n  parentHash: \\\"0x099776a52223b892d13266bb3aec3cc04c455dc797185f0b3300d39f9fc0a8ec\\\",\n  receiptsRoot: \\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\n  sha3Uncles: \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\n  size: 535,\n  stateRoot: \\\"0x0c9feec5a201c8c98618331aecbfd2d4d93da1c6064abd0c41ae649fc08d8d06\\\",\n  timestamp: 1520391527,\n  totalDifficulty: 8919666,\n  transactions: [],\n  transactionsRoot: \\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\n  uncles: []\n}\n```\n通过交易hash查看交易：\n```\n> eth.getTransaction(\\\"0x1b21bba16dd79b659c83594b0c41de42debb2738b447f6b24e133d51149ae2a6\\\")\n{\n  blockHash: \\\"0x1cb368a27cc23c786ff5cdf7cd4351d48f4c8e8aea2e084a5e9d7c480449c79a\\\",\n  blockNumber: 463,\n  from: \\\"0x4a3b0216e1644c1bbabda527a6da7fc5d178b58f\\\",\n  gas: 90000,\n  gasPrice: 18000000000,\n  hash: \\\"0x1b21bba16dd79b659c83594b0c41de42debb2738b447f6b24e133d51149ae2a6\\\",\n  input: \\\"0x\\\",\n  nonce: 0,\n  r: \\\"0x31d22686e0d408a16497becf6d47fbfdffe6692d91727e5b7ed3d73ede9e66ea\\\",\n  s: \\\"0x7ff7c14a20991e2dfdb813c2237b08a5611c8c8cb3c2dcb03a55ed282ce4d9c3\\\",\n  to: \\\"0x46b24d04105551498587e3c6ce2c3341d5988938\\\",\n  transactionIndex: 0,\n  v: \\\"0x38\\\",\n  value: 10000000000000000000\n}\n```','mac上以太坊私有链搭建','以太坊,私有链搭建\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'),(6,'69a123e2fb5a46961a826f681f2d48d6','区块链学习(2) 智能合约部署到以太坊私有链并交互(mac版)','2018-03-10 11:41:37','## 创建私有链\n私有链的创建在上一篇文章有提到，请直接戳[<font color=red size=11>这里</font>].\n\n[<font color=red size=11>这里</font>]:http://blog.csdn.net/a394268045/article/details/79470221\n\n## 合约代码编写\n合约代码是用的solidity语言写的。solidity语言跟java语言类似，所以会java的来写solidity，还是很方便的。这里我把[solidity英文官网]和[中文文档]都列出来了，然后找了一个例子直接拿来用了，一个简单的乘法。有更多需求的请自行查阅文档。\n[solidity英文官网]: https://solidity.readthedocs.io/en/latest/index.html\n[中文文档]:http://www.tryblockchain.org/\n新建一个文件test.sol，在文件中如下编写：\n```\npragma solidity ^0.4.0;\ncontract test {\n   /// @notice Will multiply `a` by 7.\n   function multiply(uint a) returns(uint d) {\n       return a * 7;\n   }\n}\n```\n\n## 合约代码的编译\n编译问题搞了很久，网上有说用``solc --bin test.sol``，暂时还不知道生成二进制码后怎么玩。也有说将test.sol文件中代码压缩(即将换行符和空格去掉)，生成一串字符串source，然后在eth环境中调用``eth.complie.solidity(source)``，但geth从1.6版本之后就将此命令删除了，所以会报\n```\nError: The method eth_compileSolidity does not exist/is not available\n    at web3.js:3143:20\n    at web3.js:6347:15\n    at web3.js:5081:36\n    at <anonymous>:1:1\n```\n我现在的做法是，<font color=red>使用Remix在线工具编译</font>。具体做法是：\n1. 在浏览器中打开Remix工具，网址为:http://remix.ethereum.org/；\n2. 点击左上角+，新生成一个文件test.sol；\n3. 将之前在本地写的test.sol中的代码拷贝到此文件中，如图所示\n![这里写图片描述](http://img.blog.csdn.net/20180309164545556?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM5NDI2ODA0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n4. 点击`compile` -> `start to compile`，下面会有一些警告，不用管它，然后点击`Details`按钮，拷贝json数据\n![这里写图片描述](http://img.blog.csdn.net/2018030916513730?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM5NDI2ODA0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\njson数据形式如下:\n```\n[{\\\"constant\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"getStr\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"a\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"multiply\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"d\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\n```\n 此json格式的东东就是我们编译后的数据了。\n## 部署合约代码到私有链\n**注意：在这一步之前，一定要创建私有链，并且假设你已经进入到Geth JS控制台了。**\n具体部署过程如下:\n```\n获取bin信息，即上述获取的json格式的数据\n> abi = [{\\\"constant\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"getStr\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"a\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"multiply\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"d\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\n[{\n    constant: false,\n    inputs: [],\n    name: \\\"getStr\\\",\n    outputs: [{\n        name: \\\"\\\",\n        type: \\\"string\\\"\n    }],\n    payable: false,\n    stateMutability: \\\"nonpayable\\\",\n    type: \\\"function\\\"\n}, {\n    constant: false,\n    inputs: [{\n        name: \\\"a\\\",\n        type: \\\"uint256\\\"\n    }],\n    name: \\\"multiply\\\",\n    outputs: [{\n        name: \\\"d\\\",\n        type: \\\"uint256\\\"\n    }],\n    payable: false,\n    stateMutability: \\\"nonpayable\\\",\n    type: \\\"function\\\"\n}]\n//创建合约。\n> multiplyContract = eth.contract(abi)\n{\n  abi: [{\n      constant: false,\n      inputs: [],\n      name: \\\"getStr\\\",\n      outputs: [{...}],\n      payable: false,\n      stateMutability: \\\"nonpayable\\\",\n      type: \\\"function\\\"\n  }, {\n      constant: false,\n      inputs: [{...}],\n      name: \\\"multiply\\\",\n      outputs: [{...}],\n      payable: false,\n      stateMutability: \\\"nonpayable\\\",\n      type: \\\"function\\\"\n  }],\n  eth: {\n    accounts: [\\\"0x099dc8286e3a6239e414a9faf0e478204ace0f67\\\", \\\"0x4568984f7c13b5f0f22c1f05a1b958375aa3996d\\\"],\n    blockNumber: 58,\n    coinbase: \\\"0x099dc8286e3a6239e414a9faf0e478204ace0f67\\\",\n    compile: {\n      lll: function(),\n      serpent: function(),\n      solidity: function()\n    },\n    defaultAccount: undefined,\n    defaultBlock: \\\"latest\\\",\n    gasPrice: 18000000000,\n    hashrate: 0,\n    mining: false,\n    pendingTransactions: [],\n    protocolVersion: \\\"0x3f\\\",\n    syncing: false,\n    call: function(),\n    contract: function(abi),\n    estimateGas: function(),\n    filter: function(options, callback, filterCreationErrorCallback),\n    getAccounts: function(callback),\n    getBalance: function(),\n    getBlock: function(),\n    getBlockNumber: function(callback),\n    getBlockTransactionCount: function(),\n    getBlockUncleCount: function(),\n    getCode: function(),\n    getCoinbase: function(callback),\n    getCompilers: function(),\n    getGasPrice: function(callback),\n    getHashrate: function(callback),\n    getMining: function(callback),\n    getPendingTransactions: function(callback),\n    getProtocolVersion: function(callback),\n    getRawTransaction: function(),\n    getRawTransactionFromBlock: function(),\n    getStorageAt: function(),\n    getSyncing: function(callback),\n    getTransaction: function(),\n    getTransactionCount: function(),\n    getTransactionFromBlock: function(),\n    getTransactionReceipt: function(),\n    getUncle: function(),\n    getWork: function(),\n    iban: function(iban),\n    icapNamereg: function(),\n    isSyncing: function(callback),\n    namereg: function(),\n    resend: function(),\n    sendIBANTransaction: function(),\n    sendRawTransaction: function(),\n    sendTransaction: function(),\n    sign: function(),\n    signTransaction: function(),\n    submitTransaction: function(),\n    submitWork: function()\n  },\n  at: function(address, callback),\n  getData: function(),\n  new: function()\n}\n//解锁账户\n> personal.unlockAccount(eth.accounts[0])\nUnlock account 0x099dc8286e3a6239e414a9faf0e478204ace0f67\nPassphrase: \ntrue\n//部署合约。data为上述编译得到的数据，在下面截图可以看到\n> multiply = multiplyContract.new({from:eth.coinbase,data:\\\"0x6060604052341561000f57600080fd5b6101a68061001e6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b8c9e4ed14610051578063c6888fa1146100df575b600080fd5b341561005c57600080fd5b610064610116565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100a4578082015181840152602081019050610089565b50505050905090810190601f1680156100d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156100ea57600080fd5b6101006004808035906020019091905050610159565b6040518082815260200191505060405180910390f35b61011e610166565b6040805190810160405280600781526020017f77656970696e6700000000000000000000000000000000000000000000000000815250905090565b6000600782029050919050565b6020604051908101604052806000815250905600a165627a7a72305820b115e32f8a7d822f631e49ec067bd3ca718ea68acf864b7bff16afdfd32737f60029\\\"})\nINFO [03-09|17:06:17] Submitted contract creation              fullhash=0x2caf080fff22adde98e0a4b220600740a76711edde8cf15a772262cf01592744 contract=0x800e7b3e2D9173E6645D2367075a19482cC1d87b\n{\n  abi: [{\n      constant: false,\n      inputs: [],\n      name: \\\"getStr\\\",\n      outputs: [{...}],\n      payable: false,\n      stateMutability: \\\"nonpayable\\\",\n      type: \\\"function\\\"\n  }, {\n      constant: false,\n      inputs: [{...}],\n      name: \\\"multiply\\\",\n      outputs: [{...}],\n      payable: false,\n      stateMutability: \\\"nonpayable\\\",\n      type: \\\"function\\\"\n  }],\n  address: undefined,\n  transactionHash: \\\"0x2caf080fff22adde98e0a4b220600740a76711edde8cf15a772262cf01592744\\\"\n}\n//我们知道部署合约的过程实际也是由创建合约的账户发送的一笔交易（即eth.coinbase账户）。需要挖矿进行确认。\n> miner.start();admin.sleepBlocks(1);miner.stop();\ntrue\n```\n![这里写图片描述](http://img.blog.csdn.net/20180309171707818?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM5NDI2ODA0NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n至此合约已经存在于区块链中，可以查看区块信息获取合约的地址和交易hash。\n## 与合约交互\n```\n//获取合约对象\n> MyContract = eth.contract(abi)\n{\n  abi: [{\n      constant: false,\n      inputs: [],\n      name: \\\"getStr\\\",\n      outputs: [{...}],\n      payable: false,\n      stateMutability: \\\"nonpayable\\\",\n      type: \\\"function\\\"\n  }, {\n      constant: false,\n      inputs: [{...}],\n      name: \\\"multiply\\\",\n      outputs: [{...}],\n      payable: false,\n      stateMutability: \\\"nonpayable\\\",\n      type: \\\"function\\\"\n  }],\n  eth: {\n    accounts: [\\\"0x099dc8286e3a6239e414a9faf0e478204ace0f67\\\", \\\"0x4568984f7c13b5f0f22c1f05a1b958375aa3996d\\\"],\n    blockNumber: 60,\n    coinbase: \\\"0x099dc8286e3a6239e414a9faf0e478204ace0f67\\\",\n    compile: {\n      lll: function(),\n      serpent: function(),\n      solidity: function()\n    },\n    defaultAccount: undefined,\n    defaultBlock: \\\"latest\\\",\n    gasPrice: 18000000000,\n    hashrate: 0,\n    mining: false,\n    pendingTransactions: [],\n    protocolVersion: \\\"0x3f\\\",\n    syncing: false,\n    call: function(),\n    contract: function(abi),\n    estimateGas: function(),\n    filter: function(options, callback, filterCreationErrorCallback),\n    getAccounts: function(callback),\n    getBalance: function(),\n    getBlock: function(),\n    getBlockNumber: function(callback),\n    getBlockTransactionCount: function(),\n    getBlockUncleCount: function(),\n    getCode: function(),\n    getCoinbase: function(callback),\n    getCompilers: function(),\n    getGasPrice: function(callback),\n    getHashrate: function(callback),\n    getMining: function(callback),\n    getPendingTransactions: function(callback),\n    getProtocolVersion: function(callback),\n    getRawTransaction: function(),\n    getRawTransactionFromBlock: function(),\n    getStorageAt: function(),\n    getSyncing: function(callback),\n    getTransaction: function(),\n    getTransactionCount: function(),\n    getTransactionFromBlock: function(),\n    getTransactionReceipt: function(),\n    getUncle: function(),\n    getWork: function(),\n    iban: function(iban),\n    icapNamereg: function(),\n    isSyncing: function(callback),\n    namereg: function(),\n    resend: function(),\n    sendIBANTransaction: function(),\n    sendRawTransaction: function(),\n    sendTransaction: function(),\n    sign: function(),\n    signTransaction: function(),\n    submitTransaction: function(),\n    submitWork: function()\n  },\n  at: function(address, callback),\n  getData: function(),\n  new: function()\n}\n//实例化合约\n> myContract = MyContract.at(multiply.address)\n{\n  abi: [{\n      constant: false,\n      inputs: [],\n      name: \\\"getStr\\\",\n      outputs: [{...}],\n      payable: false,\n      stateMutability: \\\"nonpayable\\\",\n      type: \\\"function\\\"\n  }, {\n      constant: false,\n      inputs: [{...}],\n      name: \\\"multiply\\\",\n      outputs: [{...}],\n      payable: false,\n      stateMutability: \\\"nonpayable\\\",\n      type: \\\"function\\\"\n  }],\n  address: undefined,\n  transactionHash: null,\n  allEvents: function(),\n  getStr: function(),\n  multiply: function()\n}\n//调用合约\n> myContract.multiply.call(5)\n35\n```\n这里有一个小问题，我在调用``myContract.multiply.call(5)``方式时，有时候输出为0，而不是正确的值，还没找到具体原因，有点蛋疼。后面找到原因了我再补上，或者有童鞋发现原因了也可以提一下。\n\n参考文章：\nhttp://blog.csdn.net/Blossomps/article/details/59542586\n','智能合约部署到以太坊私有链并交互(mac版)','以太坊,部署智能合约\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'),(7,'790cd18846a384e7b1d7cdcce684672b','区块链学习(3) 以太坊测试环境编译并部署智能合约(mac版)','2018-03-10 11:43:28','\n## 选择编写智能合约的语言\nEthereum上的智能合约需要使用solidity语言来撰写。虽然还有其他能用来撰写智能合约的语言如Serpent（类Python）、lll（类Fortran），但目前看到所有公开的智能合约都是使用solidity撰写。\n\nsolidity是一种看起来像java的语言。它属于强类型（Strong Type，在定义变数时需要指定类型）语言、在定义函式（function）时同样需指定回传的类型（type）、同样也需要先编译才能执行。这些特性跟java很相似。\n\n##  开发前准备\n### 介绍truffle框架\n我们使用当前最活跃的智能合约开发框架truffle为基础来开发。\n就像一般网站或App开发一样，在提供公开服务之前，开发者会在自己用于写程序的电脑（又称作本机）或透过测试网络来测试程序执行的效果，测试完成后，才会部署到公开的网络上提供服务。开发区块链智能合约（程序）的过程也是如此。特别是公开链上所有写入或读取计算结果的操作都需要真金白银（虚拟代币），而且根据网络状况，每个公开链上的操作都需要要一小段反应时间（15秒~数分钟），这些等待颇浪费宝贵的开发时间⏳。因此在开发的过程中，我们将使用Ganache工具在电脑上模拟智能合约所需的以太坊内存块链测试环境。\n\nGanache中也包含了Javascript版本的Ethereum虚拟机（Ethereum Virtual Machine），因此可以完整地执行智能合约。\n\n### 安装truffle框架\n```\nnpm install -g truffle\n```\nnpm是node中的命令，请自行查阅安装。\n\n### 安装并启动Ganache\n**truffle之前是跟testrpc配套使用的，但这种方式现在已被摒弃!!!truffle官方强烈推荐使用Ganache替代testrpc。**毕竟，testrpc是在命令行里，而Ganache是有安装包，有图形界面的。\n\nGanache下载地址戳[这里]，下载好后，启动Ganache：\n\n![这里写图片描述](//img-blog.csdn.net/20180321162750683?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n[这里]:http://truffleframework.com/ganache/\n可以看到Ganache启动后自动建立了10个帐号（Accounts），每个帐号中都有100个测试用的以太币（Ether）。也可以看到rpcserver(默认是127.0.0.1:7545)，networkId等参数。要注意Ganache仅运行在內存中，因此每次重开时都会回到全新的状态。\n\n## 创建项目\n开启另一个终端窗口，开始创建项目：\n```\nluoxiaohui:eth luoxiaohui$ mkdir SmardContractDemo\nluoxiaohui:eth luoxiaohui$ rm -rf SmardContractDemo/\nluoxiaohui:eth luoxiaohui$ mkdir SmartContractDemo\nluoxiaohui:eth luoxiaohui$ cd SmartContractDemo/\nluoxiaohui:SmartContractDemo luoxiaohui$ ls\nluoxiaohui:SmartContractDemo luoxiaohui$ mkdir HelloWorld\nluoxiaohui:SmartContractDemo luoxiaohui$ cd HelloWorld/\nluoxiaohui:HelloWorld luoxiaohui$ ls\nluoxiaohui:HelloWorld luoxiaohui$ truffle init\nDownloading...\nUnpacking...\nSetting up...\nUnbox successful. Sweet!\n\nCommands:\n\n  Compile:        truffle compile\n  Migrate:        truffle migrate\n  Test contracts: truffle test\nluoxiaohui:HelloWorld luoxiaohui$ ls\ncontracts		test			truffle.js\nmigrations		truffle-config.js\n```\n**目录结构：**\n/contracts:存放智能合约原始代码的地方，可以看到里面已经有一个sol文件，我们开发的HelloWorld.sol文件就存放在这里。\n\n/migrations:这是 Truffle用来部署智能合约的功能，待会儿我们会修改1_initial_migration.js来部署 HelloWorld.sol。\n\ntruffle.js: Truffle 的配置文档。\n\n## 新建HelloWorld合约\n在contracts文件夹下新建HelloWorld.sol文件，当然也可以直接在HelloWorld路径下面直接执行truffle create contract HelloWorld命令来创建HelloWorld.sol。\n```\nluoxiaohui:HelloWorld luoxiaohui$ cd contracts/\nluoxiaohui:contracts luoxiaohui$ ls\nMigrations.sol\nluoxiaohui:contracts luoxiaohui$ truffle create contract HelloWorld\nluoxiaohui:contracts luoxiaohui$ ls\nHelloWorld.sol	Migrations.sol\n```\n编辑HelloWorld.sol文件內容如下：\n```\npragma solidity ^0.4.4;\n\n\ncontract HelloWorld {\n  function HelloWorld() {\n    // constructor\n  }\n\n  function sayHello () returns(string) {\n  	return (\\\"Hello World\\\");\n  }\n  \n  function print(string name) constant returns (string) {\n    return name;\n	}\n}\n```\n`pragma solidity ^0.4.4;`指名目前使用的solidity版本，不同版本的solidity可能会编译出不同的bytecode。^代表兼容solidity`0.4.4 ~ 0.4.9`的版本。\n`contract`关键字类似于其他语言中较常见的`class`。因为`solidity`是专为智能合约（Contact）设计的语言，声明`contract`后即内置了开发智能合约所需的功能。也可以把这句理解为`class HelloWorld extends Contract`。\n```\nfunction sayHello () returns(string) {\n  	return (\\\"Hello World\\\");\n  }\n```\n函数的结构与其他程序类似，但如果有传入的参数或回传值，需要指定参数或回传值的类型（type）。\n`print`方法中传入了一个`name`参数。我们也为`print`方法加入一个`constant`声明，表示调用这个方法并不会改变区块链的状态。如此一来，透过`truffle-contract`来调用此方法时，会自动选用`call`来呼叫，也不需要额外提供`gas`。\n## 编译\n执行`truffle compile`命令，我们可以将HelloWorld.sol原始码编译成Ethereum bytecode。\n```\nluoxiaohui:contracts luoxiaohui$ cd ..\nluoxiaohui:HelloWorld luoxiaohui$ ls\ncontracts		test			truffle.js\nmigrations		truffle-config.js\nluoxiaohui:HelloWorld luoxiaohui$ truffle compile\nCompiling ./contracts/HelloWorld.sol...\nCompiling ./contracts/Migrations.sol...\n\nCompilation warnings encountered:\n\n/Users/luoxiaohui/Develop/eth/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol:5:3: Warning: No visibility specified. Defaulting to \\\"public\\\".\n  function HelloWorld() {\n  ^\nSpanning multiple lines.\n,/Users/luoxiaohui/Develop/eth/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol:9:3: Warning: No visibility specified. Defaulting to \\\"public\\\".\n  function sayHello () returns(string) {\n  ^\nSpanning multiple lines.\n,/Users/luoxiaohui/Develop/eth/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol:9:3: Warning: Function state mutability can be restricted to pure\n  function sayHello () returns(string) {\n  ^\nSpanning multiple lines.\n\nWriting artifacts to ./build/contracts\n\nluoxiaohui:HelloWorld luoxiaohui$ ls\nbuild			migrations		truffle-config.js\ncontracts		test\n```\n编译成功后，会在HelloWorld文件夹下面的build/contracts文件夹下面看见HelloWorld.json文件。\n## 部署\ntruffle框架中提供了方便部署合约的脚本。打开migrations/1_initial_migration.js文件（脚本使用Javascript编写），将内容修改如下：\n```\nvar HelloWorld = artifacts.require(\\\"./HelloWorld.sol\\\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(HelloWorld);\n};\n```\n使用`artifacts.require`语句来取得准备部署的合约。使用`deployer.deploy`语句将合约部署到区块链上。\n\n现在执行truffle migrate命令：\n```\nluoxiaohui:HelloWorld luoxiaohui$ truffle migrate\nError: No network specified. Cannot determine current network.\n    at Object.detect (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/environment.js:31:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-core/lib/commands/migrate.js:91:1\n    at finished (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-workflow-compile/index.js:53:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/index.js:303:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/profiler.js:157:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:3874:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:473:1\n    at replenish (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:993:1)\n    at iterateeCallback (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:983:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:958:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:3871:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/profiler.js:153:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:1126:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:473:1\n    at iteratorCallback (/usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:1050:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:958:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/~/async/dist/async.js:1123:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/truffle-compile/profiler.js:132:1\n    at FSReqWrap.oncomplete (fs.js:153:5)\n```\n此时报错：`No network specified. Cannot determine current network.`，我们需要改一下truffle.js文件，如下所示:\n```\nmodule.exports = {\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  // to customize your Truffle configuration!\n  networks: {\n        development: {\n            host: \\\"localhost\\\",\n            port: 7545,\n            network_id: \\\"*\\\" // 匹配任何network id\n         }\n    }\n};\n```\n这里我们需要在测试环境连接我们的Ganache服务，需要与Ganache上的IP和端口保持一致。\n\n执行truffle migrate命令：\n```\nluoxiaohui:HelloWorld luoxiaohui$ truffle migrate --reset\nUsing network \\\'development\\\'.\n\nRunning migration: 1_initial_migration.js\n  Deploying HelloWorld...\n  ... 0xe0f218b68644f6e0f25878db4ae3747f24c1684a08bf00ac06606f875da87403\n  HelloWorld: 0x0a57d97d0b44dddb951bbcb36581b13207155c3b\nSaving artifacts...\n```\n`--reset`表示部署过一次之后，下次再部署，需要添加此属性。切换到Ganache界面中，不出意外应该就能看到第一个账号消耗了一部分的eth。\n\n## 与合约互动\n`truffle`提供命令行工具，执行`truffle console`命令后，可用Javascript来和刚刚部署的合约互动。\n```\ntruffle(development)> HelloWorld.deployed().then(instance => contract = instance)\nTruffleContract {\n  constructor: \n   { [Function: TruffleContract]\n     _static_methods: \n      { setProvider: [Function: setProvider],\n        new: [Function: new],\n        at: [Function: at],\n        deployed: [Function: deployed],\n        defaults: [Function: defaults],\n        hasNetwork: [Function: hasNetwork],\n        isDeployed: [Function: isDeployed],\n        detectNetwork: [Function: detectNetwork],\n        setNetwork: [Function: setNetwork],\n        resetAddress: [Function: resetAddress],\n        link: [Function: link],\n        clone: [Function: clone],\n        addProp: [Function: addProp],\n        toJSON: [Function: toJSON] },\n     _properties: \n      { contract_name: [Object],\n        contractName: [Object],\n        abi: [Object],\n        network: [Function: network],\n        networks: [Function: networks],\n        address: [Object],\n        transactionHash: [Object],\n        links: [Function: links],\n        events: [Function: events],\n        binary: [Function: binary],\n        deployedBinary: [Function: deployedBinary],\n        unlinked_binary: [Object],\n        bytecode: [Object],\n        deployedBytecode: [Object],\n        sourceMap: [Object],\n        deployedSourceMap: [Object],\n        source: [Object],\n        sourcePath: [Object],\n        legacyAST: [Object],\n        ast: [Object],\n        compiler: [Object],\n        schema_version: [Function: schema_version],\n        schemaVersion: [Function: schemaVersion],\n        updated_at: [Function: updated_at],\n        updatedAt: [Function: updatedAt] },\n     _property_values: {},\n     _json: \n      { contractName: \\\'HelloWorld\\\',\n        abi: [Array],\n        bytecode: \\\'0x6060604052341561000f57600080fd5b6102488061001e6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311114af114610051578063ef5fb05b14610127575b600080fd5b341561005c57600080fd5b6100ac600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506101b5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ec5780820151818401526020810190506100d1565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013257600080fd5b61013a6101c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017a57808201518184015260208101905061015f565b50505050905090810190601f1680156101a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bd610208565b819050919050565b6101cd610208565b6040805190810160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b6020604051908101604052806000815250905600a165627a7a72305820f612c9a7978abafecc42437856f4abb1a667c6f9f3e60e87c134d5ddc00877b80029\\\',\n        deployedBytecode: \\\'0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311114af114610051578063ef5fb05b14610127575b600080fd5b341561005c57600080fd5b6100ac600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506101b5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ec5780820151818401526020810190506100d1565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013257600080fd5b61013a6101c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017a57808201518184015260208101905061015f565b50505050905090810190601f1680156101a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bd610208565b819050919050565b6101cd610208565b6040805190810160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b6020604051908101604052806000815250905600a165627a7a72305820f612c9a7978abafecc42437856f4abb1a667c6f9f3e60e87c134d5ddc00877b80029\\\',\n        sourceMap: \\\'26:225:0:-;;;50:46;;;;;;;;26:225;;;;;;\\\',\n        deployedSourceMap: \\\'26:225:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;175:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;100:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;175:74:0;221:6;;:::i;:::-;242:4;235:11;;175:74;;;:::o;100:69::-;129:6;;:::i;:::-;142:22;;;;;;;;;;;;;;;;;;;;100:69;:::o;26:225::-;;;;;;;;;;;;;;;:::o\\\',\n        source: \\\'pragma solidity ^0.4.4;\\\n\\\n\\\ncontract HelloWorld {\\\n  function HelloWorld() {\\\n    // constructor\\\n  }\\\n\\\n  function sayHello () returns(string) {\\\n  \\	return (\\\"Hello World\\\");\\\n  }\\\n  \\\n  function print(string name) constant returns (string) {\\\n    return name;\\\n}\\\n}\\\n\\\',\n        sourcePath: \\\'/Users/luoxiaohui/Develop/eth/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol\\\',\n        ast: [Object],\n        legacyAST: [Object],\n        compiler: [Object],\n        networks: [Object],\n        schemaVersion: \\\'2.0.0\\\',\n        updatedAt: \\\'2018-03-11T09:09:50.198Z\\\' },\n     setProvider: [Function: bound setProvider],\n     new: [Function: bound new],\n     at: [Function: bound at],\n     deployed: [Function: bound deployed],\n     defaults: [Function: bound defaults],\n     hasNetwork: [Function: bound hasNetwork],\n     isDeployed: [Function: bound isDeployed],\n     detectNetwork: [Function: bound detectNetwork],\n     setNetwork: [Function: bound setNetwork],\n     resetAddress: [Function: bound resetAddress],\n     link: [Function: bound link],\n     clone: [Function: bound clone],\n     addProp: [Function: bound addProp],\n     toJSON: [Function: bound toJSON],\n     web3: \n      Web3 {\n        _requestManager: [Object],\n        currentProvider: [Object],\n        eth: [Object],\n        db: [Object],\n        shh: [Object],\n        net: [Object],\n        personal: [Object],\n        bzz: [Object],\n        settings: [Object],\n        version: [Object],\n        providers: [Object],\n        _extend: [Object] },\n     class_defaults: \n      { from: \\\'0x6d978eee45793329d433ca021bf16dcd25d8f197\\\',\n        gas: 6721975,\n        gasPrice: 100000000000 },\n     currentProvider: \n      HttpProvider {\n        host: \\\'http://localhost:7545\\\',\n        timeout: 0,\n        user: undefined,\n        password: undefined,\n        headers: undefined,\n        send: [Function],\n        sendAsync: [Function],\n        _alreadyWrapped: true },\n     network_id: \\\'1520754729941\\\' },\n  abi: \n   [ { inputs: [],\n       payable: false,\n       stateMutability: \\\'nonpayable\\\',\n       type: \\\'constructor\\\' },\n     { constant: false,\n       inputs: [],\n       name: \\\'sayHello\\\',\n       outputs: [Array],\n       payable: false,\n       stateMutability: \\\'nonpayable\\\',\n       type: \\\'function\\\' },\n     { constant: true,\n       inputs: [Array],\n       name: \\\'print\\\',\n       outputs: [Array],\n       payable: false,\n       stateMutability: \\\'view\\\',\n       type: \\\'function\\\' } ],\n  contract: \n   Contract {\n     _eth: \n      Eth {\n        _requestManager: [Object],\n        getBalance: [Object],\n        getStorageAt: [Object],\n        getCode: [Object],\n        getBlock: [Object],\n        getUncle: [Object],\n        getCompilers: [Object],\n        getBlockTransactionCount: [Object],\n        getBlockUncleCount: [Object],\n        getTransaction: [Object],\n        getTransactionFromBlock: [Object],\n        getTransactionReceipt: [Object],\n        getTransactionCount: [Object],\n        call: [Object],\n        estimateGas: [Object],\n        sendRawTransaction: [Object],\n        signTransaction: [Object],\n        sendTransaction: [Object],\n        sign: [Object],\n        compile: [Object],\n        submitWork: [Object],\n        getWork: [Object],\n        coinbase: [Getter],\n        getCoinbase: [Object],\n        mining: [Getter],\n        getMining: [Object],\n        hashrate: [Getter],\n        getHashrate: [Object],\n        syncing: [Getter],\n        getSyncing: [Object],\n        gasPrice: [Getter],\n        getGasPrice: [Object],\n        accounts: [Getter],\n        getAccounts: [Object],\n        blockNumber: [Getter],\n        getBlockNumber: [Object],\n        protocolVersion: [Getter],\n        getProtocolVersion: [Object],\n        iban: [Object],\n        sendIBANTransaction: [Function: bound transfer] },\n     transactionHash: null,\n     address: \\\'0x155d6d4e1deb951b70c01498369cad1103e1bf9e\\\',\n     abi: [ [Object], [Object], [Object] ],\n     sayHello: \n      { [Function: bound ]\n        request: [Function: bound ],\n        call: [Function: bound ],\n        sendTransaction: [Function: bound ],\n        estimateGas: [Function: bound ],\n        getData: [Function: bound ],\n        \\\'\\\': [Circular] },\n     print: \n      { [Function: bound ]\n        request: [Function: bound ],\n        call: [Function: bound ],\n        sendTransaction: [Function: bound ],\n        estimateGas: [Function: bound ],\n        getData: [Function: bound ],\n        string: [Circular] },\n     allEvents: [Function: bound ] },\n  sayHello: \n   { [Function]\n     call: [Function],\n     sendTransaction: [Function],\n     request: [Function: bound ],\n     estimateGas: [Function] },\n  print: \n   { [Function]\n     call: [Function],\n     sendTransaction: [Function],\n     request: [Function: bound ],\n     estimateGas: [Function] },\n  sendTransaction: [Function],\n  send: [Function],\n  allEvents: [Function: bound ],\n  address: \\\'0x155d6d4e1deb951b70c01498369cad1103e1bf9e\\\',\n  transactionHash: null }\n```\n如果有报错：`Error: HelloWorld has not been deployed to detected network (network/artifact mismatch)`，请重新部署`truffle migrate --reset`，并重新进入到`truffle`环境。\n\n`HelloWorld.deployed().then(instance => contract = instance)`这里使用HelloWorld.deployed().then语句来取得HelloWorld合约的Instance（实例），并存到contract变量中，以方便后续的调用。\n调用方法：\n```\ntruffle(development)> contract.sayHello.call()\n\\\'Hello World\\\'\ntruffle(development)> contract.print.call(\\\"luoxiaohui\\\")\n\\\'luoxiaohui\\\'\n```\n直接呼叫`contract.sayHello()`也会得到一样的结果。`truffle-contract`提供使用call()来读取只读（read only）的数据，这样就不需提供`gas`。因此如果遇到的操作需要向区块链写入数据，我们就不能用call语句了。至此，我们已写好并部署完成了第一个智能合约，也验证了合约确实可以运作啦～\n\n','以太坊测试环境编译并部署智能合约(mac版)','部署智能合约\0\0\0\0\0\0\0\0\0\0\0\0'),(8,'6f78dccf9595790750e2abd1afca87b6','区块链学习(4) 发布代币(token)并通过智能合约与网页交互(mac版)','2018-03-10 11:56:27','## 准备工作\n这里采用truffle+metamask+Ganache的组合方式。\n\n### truffle\ntruffle框架可以在我的上一篇文章[区块链学习(3) 以太坊测试环境编译并部署智能合约(mac版)]查看truffle介绍以及安装方式。\n\n### MetaMask\nMetaMask是一款在浏览器上使用的插件类型的以太坊钱包，目前支持的浏览器有Chrome Firefox Opera。该钱包不需要下载，只需要在谷歌浏览器添加对应的扩展程序即可，非常轻量级，使用起来也非常方便。请读者自行到[MetaMask]官网进行下载。至于各个浏览器安装插件方式，请度娘。\n\n### Ganache\nGanache，主要是truffle官网墙裂推荐，用来代替testrpc。Ganache有安装包，可以到[truffle官网]进行下载。Ganache和testrpc类似，启动时会生成10个默认账号，并且每个默认账号中有100个eth，不过，都是测试环境啦，哈哈～\n**注意: 为了避免引起问题，请下载Ganeche最新稳定版，不要下载预览版**\n\n[区块链学习(3) 以太坊测试环境编译并部署智能合约(mac版)]:http://blog.csdn.net/a394268045/article/details/79518530\n[MetaMask]:https://metamask.io/\n[truffle官网]:http://truffleframework.com/ganache/\n\n## 实现流程\n\n### 新建目录\n新建一个目录tokendemo，并cd到目录中\n```\nluoxiaohui:truffle luoxiaohui$ mkdir tokendemo\nluoxiaohui:truffle luoxiaohui$ cd tokendemo/\nluoxiaohui:tokendemo luoxiaohui$ \n```\n\n### 使用unbox下载封装模块:\n```\nluoxiaohui:tokendemo luoxiaohui$ truffle unbox tutorialtoken\nDownloading...\nUnpacking...\nSetting up...\nUnbox successful. Sweet!\n\nCommands:\n\n  Compile:        truffle compile\n  Migrate:        truffle migrate\n  Test contracts: truffle test\n  Run dev server: npm run dev\nluoxiaohui:tokendemo luoxiaohui$ \n```\n关于unbox关键字，我重点说下，我之前经常看到其他博客也有用这个，但不知道什么意思，然后到[truffle官网]逛了下，发现了猫腻：\n![这里写图片描述](//img-blog.csdn.net/2018031917454585?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n[truffle官网]:http://truffleframework.com/boxes/\n 原来，truffle网站中封装了很多现成的框架到一些box中，这类框架有官方的，也有个人github提交的，然后truffle官方引用过来的，真的是造福我们开发人员哦～\n \n### 安装zeppelin-solidity\n```\nluoxiaohui:tokendemo luoxiaohui$ npm install zeppelin-solidity\nnpm WARN tutorialtoken@1.0.0 No description\nnpm WARN tutorialtoken@1.0.0 No repository field.\n\n+ zeppelin-solidity@1.7.0\nadded 8 packages from 6 contributors in 4.458s\nluoxiaohui:tokendemo luoxiaohui$ ls\nbox-img-lg.png		box-img-sm.png		bs-config.json		contracts		migrations		node_modules		package-lock.json	package.json		src			test			truffle.js\nluoxiaohui:tokendemo luoxiaohui$ \n```\nnpm安装请自行度娘。zeppelin-solidity模块安装好后，能在npm包里找到。\n\n## 编写合约代码并部署\n\n### 写合约代码\n在contracts/目录下新建文件TutorialToken.sol，并写入如下代码：\n```\npragma solidity ^0.4.2;\n\nimport \\\'zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\\\';\n\ncontract TutorialToken is StandardToken {\n\n	string public name = \\\'TutorialToken\\\';\n	string public symbol = \\\'TT\\\';\n	uint8 public decimals = 2;\n	uint public INITIAL_SUPPLY = 120000;\n\n	function TutorialToken() public {\n  		totalSupply_ = INITIAL_SUPPLY;\n  		balances[msg.sender] = INITIAL_SUPPLY;\n	}\n}\n```\n建立标准智能合约时，我们需要导入StandardToken.sol，让我们的合约TutorialToken来继承，is代表继继承的意思。\n常量`name`和`symbol` 用来保证我们的token是唯一标识的。\n常量`decimals` 表示我们的token能被细分到小数点后多少位。\n常量`INITIAL_SUPPLY` 表示我们的合约被部署时，初始化时有多少代币,这里随意写。\n在构造函数TutorialToken()中，设置了总的代币(token)数量，和发送者余额两个参数。\n\n#### 配置文件\n在migrations/目录下新建2_deploy_contracts.js文件，文件内容如下：\n```\nvar TutorialToken = artifacts.require(\\\"TutorialToken\\\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(TutorialToken);\n};\n```\n\n打开已经下载好了的Ganache，\n![这里写图片描述](//img-blog.csdn.net/20180319181535818?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n我这里由于之前使用Ganache做过交易，所以前面两个地址消耗了一些eth。\n\n### 修复index.xml中jquery引用路径问题\n修改src/index.xml第50行代码，由于国内google被枪，请将jquery引用路径由goolge改为国内的，比如改为:\n```\n<script src=\\\"http://libs.baidu.com/jquery/1.9.0/jquery.js\\\"></script>\n```\n\n### 编译，部署，运行\n```\nLast login: Mon Mar 19 18:36:35 on ttys002\nluoxiaohui:tokendemo luoxiaohui$ truffle compile\nCompiling ./contracts/TutorialToken.sol...\nCompiling zeppelin-solidity/contracts/math/SafeMath.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20/BasicToken.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20/ERC20.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol...\nCompiling zeppelin-solidity/contracts/token/ERC20/StandardToken.sol...\nWriting artifacts to ./build/contracts\n\nluoxiaohui:tokendemo luoxiaohui$ truffle migrate\nUsing network \\\'development\\\'.\n\nNetwork up to date.\nluoxiaohui:tokendemo luoxiaohui$ truffle migrate --reset\nUsing network \\\'development\\\'.\n\nRunning migration: 1_initial_migration.js\n  Replacing Migrations...\n  ... 0x8a7a1b7345aa5b7433d751d4e53f668698326dcbc1341ff7c47eba0fca10107f\n  Migrations: 0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6\nSaving successful migration to network...\n  ... 0x1135ea1dd6947f262d65dde8712d17b4b0ec0a36cc917772ce8acd7fe01ca8e2\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying TutorialToken...\n  ... 0x62c44668bc26a6dc310f713796c1e7e183e11d4a2eec36cb69ab897dd28a76a7\n  TutorialToken: 0xf204a4ef082f5c04bb89f7d5e6568b796096735a\nSaving successful migration to network...\n  ... 0xd7245d7b1c0a7eb5a5198754f7edd7abdae3b806605b54ecc4716f9b4b05de61\nSaving artifacts...\nluoxiaohui:tokendemo luoxiaohui$ npm run dev\n\n> tutorialtoken@1.0.0 dev /Users/luoxiaohui/Develop/blockchain/truffleframework/truffle/tokendemo\n> lite-server\n\n** browser-sync config **\n{ injectChanges: false,\n  files: [ \\\'./**/*.{html,htm,css,js}\\\' ],\n  watchOptions: { ignored: \\\'node_modules\\\' },\n  server: \n   { baseDir: [ \\\'./src\\\', \\\'./build/contracts\\\' ],\n     middleware: [ [Function], [Function] ] } }\n[Browsersync] Access URLs:\n --------------------------------------\n       Local: http://localhost:3000\n    External: http://192.168.33.44:3000\n --------------------------------------\n          UI: http://localhost:3001\n UI External: http://192.168.33.44:3001\n --------------------------------------\n[Browsersync] Serving files from: ./src\n[Browsersync] Serving files from: ./build/contracts\n[Browsersync] Watching files...\n18.03.19 18:41:03 304 GET /index.html\n18.03.19 18:41:03 304 GET /css/bootstrap.min.css\n18.03.19 18:41:03 304 GET /js/bootstrap.min.js\n18.03.19 18:41:03 304 GET /js/web3.min.js\n18.03.19 18:41:03 304 GET /js/truffle-contract.js\n18.03.19 18:41:03 304 GET /js/app.js\n18.03.19 18:41:04 200 GET /TutorialToken.json\n```\n自动弹出的网页如图所示:\n![这里写图片描述](//img-blog.csdn.net/2018031918470284?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n## metamask连接Ganache\n安装好metamask插件后，在浏览器的右上角应该有一个狐狸的头像，点击头像->选择网络Custom RPC，此处填写开启的Ganache服务的IP和端口，将http://127.0.0.1:7545 填入其中。\n![这里写图片描述](//img-blog.csdn.net/20180319193005231?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n如果连接成功的话，应该如图所示:\n![这里写图片描述](//img-blog.csdn.net/201803191932481?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n 默认显示Account1，并且这个Account1的地址，跟Ganache上显示的第一个地址，是一样的，点击右上角人头切换账号时，里面应该有跟ganache相同的10个地址，可以供你随时切换。\n\n## 发送代币\n我们将发送代币到第二个地址：\n![这里写图片描述](//img-blog.csdn.net/20180319200347882?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n点击transfer按钮，出现如图所示：\n![这里写图片描述](//img-blog.csdn.net/20180319200428385?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n点击submit，稍等片刻，应该就会自动消失，在metamask和Ganache中就能看到交易记录。\n![这里写图片描述](//img-blog.csdn.net/20180319201558200?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2EzOTQyNjgwNDU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**注意：上面截图看到了几个失败的交易记录，应该是metamask来大姨妈了，我电脑重启之后，进入到项目目录，编译，部署，运行，再进行交易，是OK的。如果有失败的童鞋，不妨试试重启。**\n\n在metamask中切换账号到刚刚交易的那个地址，比如我是第二个，切换成功后，刷新http://localhost:3000/ ，此时就能看到之前转过来的1000个TT。智能合约与网页交互到此为止，童鞋们可以各个账号切换互相转账，多熟悉熟悉～','发布代币 网页交互 truffle','Ganache,metamak'),(9,'3cbeb5bde8b746e7dd27085d44fb2480','区块链学习(5) go语言安装和环境配置(mac版)','2018-03-10 13:37:07','## 前言\n前两年就听说go语言很火，并且它在处理并发问题上有比java，php要好太多，但一直没入手，最近在看区块链中的超级账本(Hyperledger)中的fabric项目，此项目是IBM和另外两家大公司，前期用不同语言，后面用一个叫黑客马拉松的赛事合并起来的。go语言在里面占的比重比较大。所以，go语言必须得熟悉起来～\n\n## go语言安装\n直接到[golang官网]下载安装包。我这边需要翻墙才能进入，好人做到底，我上传到了百度云盘：链接: https://pan.baidu.com/s/1GIiqBqPIxuNEHVeBXyo8Ag 密码: u262，有需要的直接拿走。安装成功后：\n```\nluoxiaohui:~ luoxiaohui$ go version\ngo version go1.10 darwin/amd64\n```\n[golang官网]:https://golang.org/doc/install\n\n## 环境变量配置\n主要是要配置GOPATH路径，打开.bash_profile文件.\n```\nluoxiaohui:~ luoxiaohui$ vi ~/.bash_profile\n```\n按`i`，添加环境变量：\n```\nexport PATH=/usr/local/go/bin:$PATH\nexport GOPATH=/Users/luoxiaohui/Develop/go\nexport PATH=$PATH:$GOPATH\n```\n按`esc`，`:x` 退出并保存:\n```\nluoxiaohui:~ luoxiaohui$ source ~/.bash_profile\n```\n查看环境变量：\n```\nluoxiaohui:~ luoxiaohui$ go env\nGOARCH=\\\"amd64\\\"\nGOBIN=\\\"/usr/local/go/bin\\\"\nGOCACHE=\\\"/Users/luoxiaohui/Library/Caches/go-build\\\"\nGOEXE=\\\"\\\"\nGOHOSTARCH=\\\"amd64\\\"\nGOHOSTOS=\\\"darwin\\\"\nGOOS=\\\"darwin\\\"\nGOPATH=\\\"/Users/luoxiaohui/Develop/go\\\"\nGORACE=\\\"\\\"\nGOROOT=\\\"/usr/local/go\\\"\nGOTMPDIR=\\\"\\\"\nGOTOOLDIR=\\\"/usr/local/go/pkg/tool/darwin_amd64\\\"\nGCCGO=\\\"gccgo\\\"\nCC=\\\"clang\\\"\nCXX=\\\"clang++\\\"\nCGO_ENABLED=\\\"1\\\"\nCGO_CFLAGS=\\\"-g -O2\\\"\nCGO_CPPFLAGS=\\\"\\\"\nCGO_CXXFLAGS=\\\"-g -O2\\\"\nCGO_FFLAGS=\\\"-g -O2\\\"\nCGO_LDFLAGS=\\\"-g -O2\\\"\nPKG_CONFIG=\\\"pkg-config\\\"\nGOGCCFLAGS=\\\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/7b/4mrg7mmx0qq62_zb134957tm0000gn/T/go-build892671447=/tmp/go-build -gno-record-gcc-switches -fno-common\\\"\n```\n其中的GOPATH路径，是用来存放开发go代码的路径，根据你自己电脑配置。\n\n## hello world测试\n在GOPATH路径下新建src/hello/目录，在里面新建hello.go文件，写入如下代码：\n```go\npackage main\n\nimport \\\"fmt\\\"\n\nfunc main() {\n	fmt.Printf(\\\"hello, world\\\n\\\")\n}\n```\ncd到hello目录下，并执行一下命令：\n```\nluoxiaohui:src luoxiaohui$ cd hello/\nluoxiaohui:hello luoxiaohui$ ls\nhello.go\nluoxiaohui:hello luoxiaohui$ go build\nluoxiaohui:hello luoxiaohui$ ./hello\nhello, world\n```\n测试OK～\n\n参考文章：\nhttps://golang.org/doc/install','在学习go语言的路上一去不复返','go语言环境配置\0\0\0\0\0\0\0\0\0\0\0\0'),(10,'d8eb071fae223e8f4b4272e29f0dc9b5','区块链学习(6) Hyperledger Fabric环境搭建(mac版)','2018-03-10 13:38:15','## Fabric简介\nFabric项目的目标是实现一个通用的权限区块链的底层基础框架。为了适用于不同的场合，采用模块化架构，提供可切换和可扩展的组建，包括共识算法，加密安全，数字资产，记录仓库，智能合约和身份鉴权等服务。Fabric克服了比特币等公有链项目的权限，如吞吐量低，无隐私性，无最终确定性以及共识算法低效等，使得用户能够方便地开发商业应用。\n\n在超级账本联盟成立之前，IBM公司就已经开源了一个叫做\\\"开放区块链\\\"(OpenBlockchain，OBC)项目。在联盟成立之后，IBM把OBC项目约44000行代码贡献给了Linux基金会，这部分代码成为了Fabric的代码的主要组成部分。在2016年3约的一次黑客松编程活动中，Blockstream和数字资产两个成员公司把格子的区块链功能代码融合到OBC中，最终建立了Fabric的雏形，也就是Fabric项目进入孵化阶段的基础代码。\n\n现在如京东，阿里，腾讯这些大公司都在钻研非数字货币的区块链技术，都是用的这种权限区块链的思想，也就是联盟链。所以， 联盟链的商业价值，并不比公有链的价值低。\n\n## 安装Docker\n首先安装[Docker]，安装好后可以确认Docker和Docker Compose的版本：\n```\ndocker --version\ndocker-compose --version\n```\n[Docker]:https://store.docker.com/editions/community/docker-ce-desktop-mac\n\n## 安装Go语言\nHyperledger Fabric主要是基于go语言的，所以得安装go语言以及配置它的环境，具体流程请参考我的[上一篇文章]\n[上一篇文章]:http://www.baidu.com\n\n## 克隆Hyperledger Fabric Samples\n```\nluoxiaohui:fabric luoxiaohui$ ls\nluoxiaohui:fabric luoxiaohui$ git clone https://github.com/hyperledger/fabric-samples.git\nCloning into \\\'fabric-samples\\\'...\nremote: Counting objects: 1373, done.\nremote: Compressing objects: 100% (30/30), done.\nremote: Total 1373 (delta 6), reused 34 (delta 4), pack-reused 1337\nReceiving objects: 100% (1373/1373), 512.34 KiB | 204.00 KiB/s, done.\nResolving deltas: 100% (608/608), done.\n```\n\n## 下载Platform-specific Binaries\n**由于国内网络原因，不能直接从https://goo.gl上下载，需要先下载一个shell文件，此shell文件地址在[这里]，将此文件命名为boostrap.sh，拷贝此文件到fabric-sample目录下。将bootstrap.sh文件的第9行版本由`1.0.4`改为`1.1.0`。**接下来在命令行中执行如下：\n```\nluoxiaohui:fabric-samples luoxiaohui$ git tag\nv1.0.2\nv1.0.6\nv1.1.0\nv1.1.0-alpha\nv1.1.0-preview\nv1.1.0-rc1\nluoxiaohui:fabric-samples luoxiaohui$ git checkout v1.1.0\nPrevious HEAD position was ba0a098... FAB-5995 Update samples to work with v1.0.2\nHEAD is now at 1252c7a... [FAB-8920] Pin fabric-samples to node.js \\\"~1.1.0\\\"\nluoxiaohui:fabric-samples luoxiaohui$ sh bootstrap.sh \n```\n然后就是漫长的等待下载啦～\n下载fabric工具成功后，在命令行里看log，应该是没有error的。此时再看fabric-samples目录下，多了一个bin目录，将此bin目录绝对路径设置到环境变量里。\n\n[这里]:https://github.com/hyperledger/fabric/blob/master/scripts/bootstrap.sh\n\n\n## 创建网络\n打开fabric-sample下的示例first-network，其中byfn.sh为启动这个网络的启动脚本，启动脚本中除建立一个包含4个节点和1个Order service的网络外，还会启动一个容器用来执行脚本在channel中加入节点，部署和初始化chaincode，以及在部署的chaincode上执行交易。\n启动脚本\n第一步，生成必要文件，执行命令：\n```\nluoxiaohui:fabric-samples luoxiaohui$ cd first-network/\nluoxiaohui:first-network luoxiaohui$ ./byfn.sh -m generate\n```\n默认channel名称为mychannel，脚本程序会给网络实例生成数字证书和密钥；生成genesis block用来启动ordering service；一些用来配置channel的配置交易。\n第二步，启动网络，执行命令：\n```\nluoxiaohui:first-network luoxiaohui$ ./byfn.sh -m up\n```\n当你看到下面的文字的时候，说明启动成功：\n```\nStarting with channel \\\'mychannel\\\' and CLI timeout of \\\'10\\\' seconds and CLI delay of \\\'3\\\' seconds\nContinue? [Y/n] y\nproceeding ...\n2018-03-21 09:41:41.994 UTC [main] main -> INFO 001 Exiting.....\nLOCAL_VERSION=1.1.0\nDOCKER_IMAGE_VERSION=1.1.0\nCreating network \\\"net_byfn\\\" with the default driver\nCreating volume \\\"net_peer0.org2.example.com\\\" with default driver\nCreating volume \\\"net_peer1.org2.example.com\\\" with default driver\nCreating volume \\\"net_peer1.org1.example.com\\\" with default driver\nCreating volume \\\"net_peer0.org1.example.com\\\" with default driver\nCreating volume \\\"net_orderer.example.com\\\" with default driver\nCreating peer1.org2.example.com ... \nCreating peer0.org2.example.com ... \nCreating peer0.org1.example.com ... \nCreating orderer.example.com ... \nCreating peer1.org1.example.com ... \nCreating peer1.org2.example.com\nCreating peer0.org2.example.com\nCreating peer1.org1.example.com\nCreating orderer.example.com\nCreating peer0.org1.example.com ... done\nCreating cli ... \nCreating cli ... done\n\n ____    _____      _      ____    _____ \n/ ___|  |_   _|    / \\    |  _ \\  |_   _|\n\\\\___ \\    | |     / _ \\   | |_) |   | |  \n ___) |   | |    / ___ \\  |  _ <    | |  \n|____/    |_|   /_/   \\\\_\\ |_| \\\\_\\   |_|  \n\nBuild your first network (BYFN) end-to-end test\n```\n关闭网络：\n```\n./byfn.sh -m down\n```\n上面通过脚本./byfn.sh生成了一个fabric网络，接下来我们将详细说明脚本中所执行的命令信息。\n\n参考文章：\nhttp://hyperledger-fabric.readthedocs.io/en/latest/build_network.html\nhttps://www.jianshu.com/p/8beb3a355f99','超级账本Hyperledger Fabric环境搭建',' Hyperledger fabric环境配置\0\0\0\0\0\0\0\0'),(11,'ea5240f4859b5fa0a197d294df7a38ca','区块链学习(7) 区块链小知识','2018-03-10 13:39:20','\n##区块链技术的发展历史\n09年刚诞生比特币时，并没有区块链这个概念，当时用小写的bitcoin表示比特币，用大写的Bitcoin表示比特币底层所用的技术。到了15年，有位经济学者发表了一篇文章，对区块链大吹特吹，全球很多国家纷纷入局。2017年9月，中国政府网发表文章《我国区块链产业有望走在世界前列》，公开支持区块链技术发展，并向13亿中国人民普及了区块链技术。区块链在金融、保险、零售、公证等实体经济领域的应用开始加速落地。\n\n## 区块链和比特币是什么关系\n	比特币的底层实现技术就是区块链。区块链可以当作是一个分布式的账本，而区块链中的每一个区块，都可以看成是一页账本。当用比特币进行交易时，在这个账本上，每十分钟，就会生成一页新的账本。\n	\n## 区块链如何分类\n区块链按准入机制，可以分为公有链，欧盟链，私有链。公有链公开透明，全球任何人都可以在公有链上发送交易，并且记账；欧盟链只能进行交易，并不能把交易信息记录下来(也就是不能记账)；而私有链，交易和记账都是内部的，外面谁都获取不到。\n\n## 比特币钱包是干嘛的\n比特币钱包是用来存储比特币的。存储的比特币的信息有：地址\n（类似于银行卡卡号）和私钥（类似于银行卡密码）。如果私钥丢了，那比特币就再也找不着了。比特币钱包的媒介可以是PC，手机，纸质本甚至大脑。\n\n## 区块如何连接成区块链\n	区块链是由一串使用加密学算法的区块连接而成。每一个区块写满了交易记录。以比特币为例，矿工需要根据前一个区块的hash值和随机数，来计算新区块的hash值和随机数。也就是说，新区块的生成，是建立在原先区块的前提下的，从而保证了区块链数据的唯一性。\n	\n## 比特币的数字签名\n比特币中的数字签名，是交易中的发起方产生的，为了保证这笔\n交易确实是由此人发起，并且数据在传输时没有被篡改。数字签名简单点来说，就是完整的交易信息，通过数字摘要技术压缩成固定格式的字符串，然后通过非对称加密技术，生成一个私钥。将完整的交易信息和数字签名传送给矿工，矿工用交易发起方的公钥对数字签名进行解密，解密成功，就将此交易数据写到区块中。\n\n## 区块链资产如何在场外交易\n现在比较主流的就是，在一些规范化的交易平台上，选择交易对手，以及根据交易平台上区块链资产的价格，双方商定，进行交易。\n\n## 冷钱包 热钱包\n这里说的钱包指的是区块链资产的钱包(包括地址和私钥)。冷钱包就是互联网访问不到的，可以是未联网的电脑，手机，纸质小本本等其他存储设备，缺点是如果物理设备坏了，冷钱包也就丢了。热钱包是互联网能访问到的，存储起来方便，缺点是容易被黑客攻击。\n','人人都应该了解的区块链小知识~','区块链\0\0\0\0\0\0');
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (23,'luoxiaohui','luoxiaohui');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-04-10 18:46:29
